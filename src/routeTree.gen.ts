/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from "@tanstack/react-router";

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as ForumIndexImport } from "./routes/forum/index";
import { Route as ForumThreadthreadIdImport } from "./routes/forum/thread_$threadId";
import { Route as ForumNewImport } from "./routes/forum/new";
import { Route as ForumThreadthreadIdReplyImport } from "./routes/forum/thread_$threadId/reply";

// Create Virtual Routes

const IndexLazyImport = createFileRoute("/")();

// Create/Update Routes

const IndexLazyRoute = IndexLazyImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/index.lazy").then((d) => d.Route));

const ForumIndexRoute = ForumIndexImport.update({
  id: "/forum/",
  path: "/forum/",
  getParentRoute: () => rootRoute,
} as any);

const ForumThreadthreadIdRoute = ForumThreadthreadIdImport.update({
  id: "/forum/thread_$threadId",
  path: "/forum/thread_$threadId",
  getParentRoute: () => rootRoute,
} as any);

const ForumNewRoute = ForumNewImport.update({
  id: "/forum/new",
  path: "/forum/new",
  getParentRoute: () => rootRoute,
} as any);

const ForumThreadthreadIdReplyRoute = ForumThreadthreadIdReplyImport.update({
  id: "/reply",
  path: "/reply",
  getParentRoute: () => ForumThreadthreadIdRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof IndexLazyImport;
      parentRoute: typeof rootRoute;
    };
    "/forum/new": {
      id: "/forum/new";
      path: "/forum/new";
      fullPath: "/forum/new";
      preLoaderRoute: typeof ForumNewImport;
      parentRoute: typeof rootRoute;
    };
    "/forum/thread_$threadId": {
      id: "/forum/thread_$threadId";
      path: "/forum/thread_$threadId";
      fullPath: "/forum/thread_$threadId";
      preLoaderRoute: typeof ForumThreadthreadIdImport;
      parentRoute: typeof rootRoute;
    };
    "/forum/": {
      id: "/forum/";
      path: "/forum";
      fullPath: "/forum";
      preLoaderRoute: typeof ForumIndexImport;
      parentRoute: typeof rootRoute;
    };
    "/forum/thread_$threadId/reply": {
      id: "/forum/thread_$threadId/reply";
      path: "/reply";
      fullPath: "/forum/thread_$threadId/reply";
      preLoaderRoute: typeof ForumThreadthreadIdReplyImport;
      parentRoute: typeof ForumThreadthreadIdImport;
    };
  }
}

// Create and export the route tree

interface ForumThreadthreadIdRouteChildren {
  ForumThreadthreadIdReplyRoute: typeof ForumThreadthreadIdReplyRoute;
}

const ForumThreadthreadIdRouteChildren: ForumThreadthreadIdRouteChildren = {
  ForumThreadthreadIdReplyRoute: ForumThreadthreadIdReplyRoute,
};

const ForumThreadthreadIdRouteWithChildren =
  ForumThreadthreadIdRoute._addFileChildren(ForumThreadthreadIdRouteChildren);

export interface FileRoutesByFullPath {
  "/": typeof IndexLazyRoute;
  "/forum/new": typeof ForumNewRoute;
  "/forum/thread_$threadId": typeof ForumThreadthreadIdRouteWithChildren;
  "/forum": typeof ForumIndexRoute;
  "/forum/thread_$threadId/reply": typeof ForumThreadthreadIdReplyRoute;
}

export interface FileRoutesByTo {
  "/": typeof IndexLazyRoute;
  "/forum/new": typeof ForumNewRoute;
  "/forum/thread_$threadId": typeof ForumThreadthreadIdRouteWithChildren;
  "/forum": typeof ForumIndexRoute;
  "/forum/thread_$threadId/reply": typeof ForumThreadthreadIdReplyRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  "/": typeof IndexLazyRoute;
  "/forum/new": typeof ForumNewRoute;
  "/forum/thread_$threadId": typeof ForumThreadthreadIdRouteWithChildren;
  "/forum/": typeof ForumIndexRoute;
  "/forum/thread_$threadId/reply": typeof ForumThreadthreadIdReplyRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | "/"
    | "/forum/new"
    | "/forum/thread_$threadId"
    | "/forum"
    | "/forum/thread_$threadId/reply";
  fileRoutesByTo: FileRoutesByTo;
  to:
    | "/"
    | "/forum/new"
    | "/forum/thread_$threadId"
    | "/forum"
    | "/forum/thread_$threadId/reply";
  id:
    | "__root__"
    | "/"
    | "/forum/new"
    | "/forum/thread_$threadId"
    | "/forum/"
    | "/forum/thread_$threadId/reply";
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute;
  ForumNewRoute: typeof ForumNewRoute;
  ForumThreadthreadIdRoute: typeof ForumThreadthreadIdRouteWithChildren;
  ForumIndexRoute: typeof ForumIndexRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  ForumNewRoute: ForumNewRoute,
  ForumThreadthreadIdRoute: ForumThreadthreadIdRouteWithChildren,
  ForumIndexRoute: ForumIndexRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/forum/new",
        "/forum/thread_$threadId",
        "/forum/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/forum/new": {
      "filePath": "forum/new.tsx"
    },
    "/forum/thread_$threadId": {
      "filePath": "forum/thread_$threadId.tsx",
      "children": [
        "/forum/thread_$threadId/reply"
      ]
    },
    "/forum/": {
      "filePath": "forum/index.tsx"
    },
    "/forum/thread_$threadId/reply": {
      "filePath": "forum/thread_$threadId/reply.tsx",
      "parent": "/forum/thread_$threadId"
    }
  }
}
ROUTE_MANIFEST_END */
